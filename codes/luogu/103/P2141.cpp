/*
# [NOIP2014 普及组] 珠心算测验

## 题目背景

NOIP2014 普及 T1

## 题目描述

珠心算是一种通过在脑中模拟算盘变化来完成快速运算的一种计算技术。珠心算训练，既能够开发智力，又能够为日常生活带来很多便利，因而在很多学校得到普及。


某学校的珠心算老师采用一种快速考察珠心算加法能力的测验方法。他随机生成一个正整数集合，集合中的数各不相同，然后要求学生回答：其中有多少个数，恰好等于集合中另外两个（不同的）数之和？


最近老师出了一些测验题，请你帮忙求出答案。

## 输入格式

共两行，第一行包含一个整数 $n$，表示测试题中给出的正整数个数。


第二行有 $n$ 个正整数，每两个正整数之间用一个空格隔开，表示测试题中给出的正整数。

## 输出格式

一个整数，表示测验题答案。

## 样例 #1

### 样例输入 #1

```
4
1 2 3 4
```

### 样例输出 #1

```
2
```

## 提示

【样例说明】


由 $1+2=3,1+3=4$，故满足测试要求的答案为 $2$。

注意，加数和被加数必须是集合中的两个不同的数。


【数据说明】


对于 $100\%$ 的数据，$3 \leq n \leq 100$，测验题给出的正整数大小不超过 $10,000$。
*/

#include <cstdio>
#include <iostream>
#include <set>
using namespace std;
set<int> num; // 查找用集合
set<int> res; // 去重用集合
int n, a[105], tmp;
int main()
{
    cin >> n;
    for (int i = 1; i <= n; ++i)
    {
        cin >> a[i];
        num.insert(a[i]);
    }
    for (int i = 1; i <= n; ++i)
    {
        for (int j = i + 1; j <= n; ++j)
        {
            int tmp = a[i] + a[j];                 // 接下来定义tmp，它是所枚举的两数之和
            set<int>::iterator it = num.find(tmp); // 直接在集合中查找tmp
            if (it != num.end())
            { // 在find中，如果没有找到集合中的元素，那么迭代器会在集合的末尾。
                // 所以如果it不在集合末尾，那么说明it在集合中出现过
                res.insert(*it); // 在去重集合中插入
            }
        }
    }
    cout << res.size(); // 直接输出集合内元素数量
    return 0;
}